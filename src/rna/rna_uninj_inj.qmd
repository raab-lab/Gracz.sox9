---
title: "DEG_uninj_inj_Sox9_Heps"
author: "Jackie Brinkman"
format: html
---
## Quarto
```{r load libraries}
#| echo: true
#| output: false

library(tidyverse)
library(ggplot2)
library(DESeq2) 
library(tximeta)
library(readr)
library(devtools)
library(BiocManager)
library(EnhancedVolcano)
library(pheatmap)
library(ComplexHeatmap)
library(renv)
```
```{r load data}
#point to quants files 
input_dir <- "/Users/jbrink/Desktop/Lab2024/gracz.sox9_archive/rna/quants"
#point to sample metadata 
samples <- read.csv('/Users/jbrink/Desktop/Lab2024/gracz.sox9_archive/20240320_RNAsamplesheet.csv', header=TRUE)
```

```{r coldata metadata}
#| output: false
#make coldata by copying sample metadata, adding col of files, names (which is sampleID)
coldata <- samples
coldata$names <- paste('1',
                       coldata$SampleID, 
                       coldata$Cell.Line, 
                       coldata$Treatment, 
                       coldata$Replicate, 
                       #coldata$Batch,
                       sep = '_')
#file.path basically constructs the path & produces a character vector of args concat term by term
coldata$files <- file.path(input_dir, coldata$names, 'quant.sf')
```

```{r don't run. for removing outlier 1638 and testing model. outlier removal is negligable}
#row_to_keep = c(TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE)
#newdata <- coldata[row_to_keep, ]
```


```{r coldata metadata}
#generate RangedSummarizedExperiment
se <- tximeta(coldata)
#include assignRanges controls the way that the rowRanges of the output object are assigned. choose abundant for most abundant isoform (expressed gene)
gse <- summarizeToGene(se, assignRanges = "abundant")
```
```{r Make DESeqDataset}
gse$Batch <- factor(gse$Batch)
#Make DESeqDataset. filter out lowly expressing genes in dds then vst the counts in dds
dds <- DESeqDataSet(gse, design = ~ Batch + Treatment)
dds$Treatment <- relevel(dds$Treatment, ref = "chow")

#generate count matrix
counts <- assay(gse)
keep <- rowSums(counts(dds)) >= 25
dds <- dds[keep,]
vsd <- vst(dds)

# get vs scaled counts and set rownames to gene symbol
vs_counts <- assay(vsd)
rownames(vs_counts) <- rowData(vsd)$gene_name
```

```{r make a pca of samples after batch effect removal for paper viz}
mm <- model.matrix(~Treatment, colData(vsd))
mat <- limma::removeBatchEffect(vs_counts, batch=vsd$Batch, design=mm)
assay(vsd) <- mat
plotPCA(vsd, 
        intgroup = c("Treatment", "SampleID")) + 
        ggplot2::theme_classic() + 
        scale_color_brewer(palette = "Paired")
```

```{r}
#commenting out b/c I wanted a plot that removed batch effect var for publication viz 
#plotPCA(vsd, 
        #intgroup = c("Treatment", "SampleID"))+ ggplot2::theme_classic() + scale_color_brewer(palette = "Paired")
```
```{r DESeq2 linear modeling}
dds <- DESeq(dds)
resultsNames(dds)
```
```{r DESeq2 linear modeling results}
res <- results(dds, tidy = TRUE) #setting col and then converting to a tibble
#summary(res) shows there are 12 NA's in padj column and 0 across other stat cols. this is fine.
```

```{r just making sure that there are no overlapping NAs}
na_both_count <- sum(is.na(res_shrink2$padj)) #& is.na(res_shrink$log2FoldChange))

print(paste("Number of rows where both padj and log2FoldChange are NA:", na_both_count))
```
```{r box plot for cooks distance b/c was having trouble with outliers and wanted to check samples}
par(mar=c(8,5,2,2))
boxplot(log10(assays(dds)[["cooks"]]), range=0, las=2)
```
```{r DESeq2 res df add gene symbols}
#build table of additional gene symbols has the first column called "row"
res_gene_names <- data.frame(row = res$row, 
                             symbol = rowData(dds)$gene_name)


res_genes_df <- merge(res, 
                      res_gene_names,
                      all.x = TRUE)
#write results
res_genes_df_csv <- write.csv(res_genes_df, 
                              file ='/Users/jbrink/Desktop/Lab2024/gracz.sox9_archive/20240903_uninj_inj_DEG.csv')
```

```{r DESeq2 res shrink LFC}
resShrink <- lfcShrink(dds,  
                       coef = "Treatment_6wk.ddc_vs_chow",
                       type="apeglm"
)

tidy_resShrink <- as.data.frame(resShrink) 
#assign symbol in new.table to new col in tidy_resShrink
tidy_resShrink$symbol <- res_gene_names$symbol

#write results
res_LFCshrink_genes_df_csv <- write.csv(res_genes_df, 
                                      file='/Users/jbrink/Desktop/Lab2024/gracz.sox9_archive/20240903_uninj_inj_DEG_LFCshrink.csv')
```

```{r volcano plot of all genes with LFC shrink}
EnhancedVolcano(tidy_resShrink,
                lab = res_no_mups,
                x = 'log2FoldChange',
                y = 'pvalue',
                title = 'DEG Sox9+ hepatocytes: uninjured v. DDC',
                #selectLab = c('Bmp6','Klf4'),
               # pCutoff = 10e-30,
                #FCcutoff = 0.5,
                pointSize = 3.0,
                labSize = 6.0
)
ggsave(file = "/Users/jbrink/Gracz.sox9/20240903_uninj_inj_volcano_LFCshrinkres.svg",
        width= 10,
        height= 8
)

```

```{r data viz. all genes}
#rownames(vs_counts) <- rowData(vsd)$gene_name as a reminder what vs_counts is
select <- order(rowMeans(vs_counts),
                decreasing=TRUE)[1:30]
df <- coldata[, c("Treatment", "SampleID")]
rownames(df) <- colnames(vs_counts)

pheatmap(vs_counts[select,], 
         cluster_rows=FALSE, 
         show_rownames=TRUE, 
         show_colnames = FALSE,
         cluster_cols=FALSE,
         annotation_col=df)
```
```{r filtering out non-sig genes from results before plotting}
res_filt <- tidy_resShrink[abs(tidy_resShrink$log2FoldChange) > 4.0 & tidy_resShrink$padj < 0.1, "symbol"]
#res_filt <- tidy_resShrink[abs(tidy_resShrink$log2FoldChange) > 2.0, "symbol"]

# get mup genes and remove them 
is_mup <- str_starts(rownames(vs_counts), "Mup") # returns logic vector
mups <- rownames(vs_counts)[is_mup]# contains mup gene symbols

counts_no_mups <- vs_counts[!is_mup,]

res_no_mups <- res_filt[!res_filt %in% mups]

# Check for missing genes
missing_genes <- topDE_no_mups[!topDE_no_mups %in% rownames(vs_counts)]
if (length(missing_genes) > 0) {
  warning("The following genes are not present in vs_counts: ", paste(missing_genes, collapse = ", "))
}

#this shows that filtering for padj means leaving NAs. I need to filter them out.
# Remove rows with NA values from topDE
res_no_mups <- na.omit(res_no_mups)

# counts of topDE genes with mups removed
plot_genes <- vs_counts[res_no_mups,]
```

```{r plotting specific gene counts}

plotCounts(dds, gene= "ENSMUSG00000037852", intgroup = "Treatment")

```


```{r}
# column annotations for pheatmap
heat_annot <- coldata[, c("Treatment", "SampleID")]
rownames(heat_annot) <- colnames(vs_counts)

pheatmap(plot_genes, 
         cluster_rows=FALSE, 
         show_rownames=FALSE, 
         show_colnames = FALSE,
         cluster_cols=FALSE,
         annotation_col=heat_annot,
         scale = "row")
```
```{r trying other heatmaps for clustering analysis}
mat <- vs_counts[res_no_mups,]
mat <- mat - rowMeans(mat)

gene_clust <- Heatmap(mat,
                      row_km = 4,
                      show_row_names = FALSE,
                      show_column_names = TRUE,
                      show_column_dend = FALSE,
                      )
clust_list <- row_dend(gene_clust)
```

```{r}
hm <- Heatmap(mat,
        row_km = 4,
        row_km_repeats = 2,
        show_row_names = FALSE,
        show_column_names = TRUE,
        show_column_dend = FALSE,
        show_row_dend = FALSE,
        )
hm
```
```{r}

hm <- draw(hm)
gene_clusts <- row_dend(hm)

clust1_genes <- row_order(hm)[['1']]
```

```{r}
mat[clust1_genes, ]

rownames(mat[clust1_genes, ])

```

```{r}
clusters <- gene_clust$kmeans

mat2 <- as.data.frame(select2)
mat2$clusters <- clusters$cluster
write.csv(mat2, "/Users/jbrink/Desktop/Lab2024/gracz.sox9/rna/RNA_uninjured_injured_DEGkmeans.csv")
```

```{r data viz. GSEA}
#uninjured v DDC hepatocyte DEG enriched for pro-inflammatory gene regulation Geneset
library(enrichplot)
library(ggplot2)
library(clusterProfiler)
library(org.Mm.eg.db)
library(msigdbr)
library(GSEABase)
library(msigdb)

m_df <- getMsigdb(
  org = "mm",
  id = "SYM"
)

h_pathways <- msigdb::subsetCollection(
  m_df,
  collection = "h"
)

#this is a function made by CY#
make_gsea_term_df <- function(path_col) {
  pathways <- Map(str_to_upper, geneIds(path_col))
  df <- stack(pathways)
  df <- df[, c("ind", "values")]
  colnames(df) <- c("pathway", "symbol")
   return(df)
}

h_paths <- make_gsea_term_df(h_pathways)

###GSEGo on Most Upregulated DEG###
topDE <- tidy.resShrink[tidy.resShrink$log2FoldChange > 1 &
                       !is.na(tidy.resShrink$padj), ]


gene_list <- topDE$symbol
names(gene_list) <- str_to_upper(topDE$symbol)


gse <- enrichGO(gene_list, 
                org.Mm.eg.db,
                keyType = "SYMBOL",
                ont           = "BP",
                pAdjustMethod = "fdr",
                pvalueCutoff  = 0.05,
                readable      = TRUE)


require(DOSE)
plot_gse <- pairwise_termsim(simplify(gse))
plot_gse
treeplot.gse <- treeplot(plot_gse, showCategory = 10)

heatplot.gse <- heatplot(plot_gse, showCategory= 10) +
                      theme(text = element_text(size = 10)) 

ridgeplot.gse<- ridgeplot(plot_gse) + 
                        labs(x = "enrichment distribution")

ggsave(file = "ENRICHRheatplot_RNA_UninjDdc_DEGup.svg",
        plot= heatplot.gse,
        width= 10,
        height= 8
)

```
```{r GSEgo on bottom DEG}
###GSEGo on Most Upregulated DEG. way more genes###
bottomDE <- tidy.resShrink[tidy.resShrink$log2FoldChange < -3 &
                       !is.na(tidy.resShrink$padj), ]


gene_list <- bottomDE$symbol
names(gene_list) <- str_to_upper(topDE$symbol)


gse <- enrichGO(gene_list, 
                org.Mm.eg.db,
                keyType = "SYMBOL",
                ont           = "BP",
                pAdjustMethod = "fdr",
                pvalueCutoff  = 0.05,
                readable      = TRUE)


require(DOSE)
plot_gse <- pairwise_termsim(gse)
plot_gse
treeplot.gse <- treeplot(plot_gse, showCategory = 10)

heatplot.gse <- heatplot(plot_gse, showCategory= 10) +
                      theme(text = element_text(size = 10)) 

ridgeplot.gse<- ridgeplot(plot_gse) + 
                        labs(x = "enrichment distribution")

ggsave(file = "ENRICHRheatplot_RNA_UninjDdc_DEGdownLFC3.svg",
        plot= heatplot.gse,
        width= 10,
        height= 8
)
```
